<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler">

    <st:bind var="view" value="${it}"/>
    <st:bind var="fullscreen" value='${request.getParameter("fullscreen") == null ? null :
        (request.getParameter("fullscreen") == "true" ? "true" : "false")}'/>

    <j:set var="fullscreen" value='${request.getParameter("fullscreen") == "true" ? "true" : "false"}'/>

    <st:bind var="page" value='${request.getParameter("page")}'/>
    <j:set var="page" value='${request.getParameter("page") == null ? 1 : request.getParameter("page")}'/>

    <st:bind var="component" value='${request.getParameter("component")}'/>
    <j:set var="component" value='${request.getParameter("component") == null ? 1 : request.getParameter("component")}'/>    
    
    <link rel="stylesheet" href="${resURL}/plugin/pipelines-stream-view/css/main.css"/>
    <j:switch on="${fullscreen}">
        <j:case value="true">            
            <j:if test="${it.fullScreenCss != null}">
                <link rel="stylesheet" href="${it.fullScreenCss}"/>
            </j:if>
        </j:case>
        <j:default>            
            <j:if test="${it.embeddedCss != null}">
                <link rel="stylesheet" href="${it.embeddedCss}"/>
            </j:if>
            <j:set var="views" value="${it.owner.views}"/>
            <j:set var="currentView" value="${it}"/>
            <j:if test="${!it.isPortletView}">
                <j:choose>
                    <j:when test="${it.owner.class.name=='hudson.model.MyViewsProperty'}">
                        <st:include page="myViewTabs.jelly" it="${it.owner.myViewsTabBar}"/>
                    </j:when>
                    <j:otherwise>
                        <st:include page="viewTabs.jelly" it="${it.owner.viewsTabBar}"/>
                    </j:otherwise>
                </j:choose>
            </j:if>
        </j:default>
    </j:switch>
    <j:if test="${!empty(from.cssUrl)}">
        <link rel="stylesheet" href="${from.cssUrl}" type="text/css" />
    </j:if>

    <script type="text/javascript" src="${resURL}/plugin/pipelines-stream-view/moment.min.js"/>    
    <script type="text/javascript" src="${resURL}/plugin/pipelines-stream-view/pipe.js"/>

    <div class="pane-frame">
        <div class="pipeline-main">
    

            <div class="pipeline-logo"/>

            <div id="taskDetails" class="popover">
            </div>

            <div id="pipelineerror-${it.id == null ? 0 : it.id}" class="pipelineerror"/>
            <div id="pipeline-message-${it.id == null ? 0 : it.id}" class="pipeline-message">
                <div class="pipeline-loading-icon"></div>
            </div>

            <j:forEach begin="1" end="${it.noOfColumns}" indexVar="i">
                <div id="pipelines-${i}-${it.id == null ? 0 : it.id}" ></div>
            </j:forEach>
            <div class="clear"></div>

            <script type="text/javascript">
                function pipeline${it.id == null ? 0 : it.id}(pipelineid, viewUrl) {

                var pipelineContainers = [];               

                <j:forEach begin="1" end="${it.noOfColumns}" indexVar="i">
                    pipelineContainers.push('pipelines-${i}-' + pipelineid);
                </j:forEach>

                var view = { "viewUrl" : viewUrl };

                var pipelineutils = new pipelineUtils();

                pipelineutils.updatePipelines(pipelineContainers, "pipelineerror-" + pipelineid, view, ${fullscreen}, ${page}, ${component}, ${it.isShowChanges()},

                <j:choose>
                    <j:when test="it.getAggregatedChangesGroupingPattern()">
                        /${it.getAggregatedChangesGroupingPattern()}/g
                    </j:when>
                    <j:otherwise>null</j:otherwise>
                </j:choose>,
                ${it.updateInterval * 1000}, ${it.id == null ? 0 : it.id}, null);
           
                }
                var jsPlumbUtilityVariable;
                Q(document).ready(function() {
                    if ( undefined === jsPlumbUtilityVariable ) {
                        jsPlumbUtilityVariable = [];
                    }
                    var itpipeline${it.id == null ? 0 : it.id} = new
                    pipeline${it.id == null ? 0 : it.id}('${it.id == null ? 0 : it.id}', '${it.getViewUrl()}');
                });
            </script>
        </div>
    </div>
    <!--<st:include page="legend.jelly"/>-->

</j:jelly>